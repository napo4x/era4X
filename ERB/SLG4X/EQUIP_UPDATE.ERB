;---------------------------
; 装備更新
;---------------------------
;各装備の検索範囲は艦船装備/EQUIP.ERHで定義しているので必要に応じて各定数を変更してください。
;---------------------------
; 主砲更新
;---------------------------
@EQUIP_UPDATE_0(SHIP_ID, COUNTRY_ID, SLOT_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM SLOT_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM WEAPON_FILTER

#DIM EQUIP_LIST, MAIN_WEAPON_TOTAL_COUNT, STATUS_LENGTH + 1

IF SHIP_CATEGORY:SHIP_ID == 調査船 || SHIP_CATEGORY:SHIP_ID == 輸送船 || SHIP_CATEGORY:SHIP_ID == 作業船
	PRINTW この艦種は主砲を装備できません
	RETURN
ENDIF
CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, 主砲)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)

$INPUT_LOOP
TRYCCALLFORM CAN_SPACECRAFT_CARRYING_{SHIP_MODEL:SHIP_ID}
	RESULT &= 1 << SLOT_ID
CATCH
	RESULT = 0
ENDCATCH
;艦種が空母であるか、「航空機を運用できる艦艇」(CAN_SPACECRAFT_CARRYING_(SHIP_MODEL_ID)のSLOT_IDビット目が立っている)だったら艦載機を、それ以外なら艦載機以外を表示する
IF SHIP_CATEGORY:SHIP_ID != 空母 && RESULT == 0
	CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, 主砲, SLOT_ID, SHIP_STATUS:SHIP_MAIN_WEAPON_SIZE, SHIP_ID, WEAPON_FILTER)
	PRINTBUTTON "[ソート]", 997
	PRINTL
	PRINTBUTTON "[フィルタ設定]", 998
	PRINTL
	PRINTBUTTON "[戻る]", 999
	INPUT
	SIF RESULT == 999
		RETURN
	IF RESULT == 998
		CALL WEAPON_FILTER_CONFIG(WEAPON_FILTER)
		GOTO INPUT_LOOP
	ENDIF
	IF RESULT == 997
		CALL EQUIP_LIST_SORT(EQUIP_LIST, 主砲)
		GOTO INPUT_LOOP
	ENDIF

	SELECTED = RESULT
	TRYCCALLFORM GET_MAIN_WEAPON_STATUS_{SELECTED}(STATUS)
			;TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
			SIF SHIP_STATUS:SHIP_MAIN_WEAPON_SIZE < STATUS:SIZE
			GOTO INPUT_LOOP
		;TRYCALLFORM GET_MAIN_WEAPON_DESCRIPTION_{SELECTED}
		IF UPDATE_TEMPLATE
			SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):主砲:SLOT_ID = SELECTED
			RETURN
		ENDIF
;		CALL CHECK_BUY
;		IF RESULT == 1
;			CALL CHANGE_MAIN_WEAPON(SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID)
;		ELSE
;			GOTO INPUT_LOOP
;		ENDIF
		CALL CHANGE_EQIP(主砲, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
		SIF RESULT == 0
			GOTO INPUT_LOOP
	CATCH
		GOTO INPUT_LOOP
	ENDCATCH
ELSE
	CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, 主砲, SLOT_ID, SHIP_STATUS:SHIP_MAIN_WEAPON_SIZE, SHIP_ID, WEAPON_FILTER)
	PRINTBUTTON "[ソート]", 997
	PRINTL
	PRINTBUTTON "[フィルタ設定]", 998
	PRINTL
	PRINTBUTTON "[戻る]", 999
	INPUT
	SIF RESULT == 999
		RETURN
	IF RESULT == 998
		CALL WEAPON_FILTER_CONFIG(WEAPON_FILTER)
		GOTO INPUT_LOOP		
	ENDIF
	IF RESULT == 997
		CALL EQUIP_LIST_SORT(EQUIP_LIST, 主砲)
		GOTO INPUT_LOOP
	ENDIF

	SELECTED = RESULT
	TRYCCALLFORM GET_MAIN_WEAPON_STATUS_{SELECTED}(STATUS)
		;TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
		SIF SHIP_STATUS:SHIP_MAIN_WEAPON_SIZE < STATUS:SIZE
			GOTO INPUT_LOOP
		;TRYCALLFORM GET_MAIN_WEAPON_DESCRIPTION_{SELECTED}
		IF UPDATE_TEMPLATE
			SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):主砲:SLOT_ID = SELECTED
			RETURN
		ENDIF
;		CALL CHECK_BUY
;		IF RESULT == 1
;			CALL CHANGE_MAIN_WEAPON(SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID)
;		ELSE
;			GOTO INPUT_LOOP
;		ENDIF
		CALL CHANGE_EQIP(主砲, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
		SIF RESULT == 0
			GOTO INPUT_LOOP
	CATCH
		GOTO INPUT_LOOP
	ENDCATCH
ENDIF

;---------------------------
; 副砲更新
;---------------------------
@EQUIP_UPDATE_1(SHIP_ID, COUNTRY_ID, SLOT_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM SLOT_ID
#DIM UPDATE_TEMPLATE
#DIM COUNTRY
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM WEAPON_FILTER

#DIM EQUIP_LIST, SUB_WEAPON_TOTAL_COUNT, STATUS_LENGTH + 1

IF SHIP_CATEGORY:SHIP_ID == 調査船 || SHIP_CATEGORY:SHIP_ID == 輸送船 || SHIP_CATEGORY:SHIP_ID == 作業船
	PRINTW この艦種は副砲を装備できません
	RETURN
ENDIF
CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, 副砲)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, 副砲, SLOT_ID, SHIP_STATUS:SHIP_SUB_WEAPON_SIZE, SHIP_ID, WEAPON_FILTER)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[フィルタ設定]", 998
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 998
	CALL WEAPON_FILTER_CONFIG(WEAPON_FILTER)
	GOTO INPUT_LOOP		
ENDIF
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, 副砲)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
TRYCCALLFORM GET_SUB_WEAPON_STATUS_{SELECTED}(STATUS)
	;TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
	SIF SHIP_STATUS:SHIP_SUB_WEAPON_SIZE < STATUS:SIZE
		GOTO INPUT_LOOP
	;TRYCALLFORM GET_SUB_WEAPON_DESCRIPTION_{SELECTED}
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):副砲:SLOT_ID = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_SUB_WEAPON(SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(副砲, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH
;---------------------------
; シールド更新
;---------------------------
@EQUIP_UPDATE_2(SHIP_ID, COUNTRY_ID, SLOT_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM SLOT_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

#DIM EQUIP_LIST, SIELD_TOTAL_COUNT, STATUS_LENGTH + 1

CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, シールド)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, シールド, SLOT_ID, SHIP_STATUS:SHIP_SIELD_SIZE, SHIP_ID, 0)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, シールド)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
TRYCCALLFORM GET_SIELD_STATUS_{SELECTED}(STATUS)
	;TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
	SIF SHIP_STATUS:SHIP_SIELD_SIZE != STATUS:SIZE
		GOTO INPUT_LOOP
	;TRYCALLFORM GET_SIELD_DESCRIPTION_{SELECTED}
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):シールド:SLOT_ID = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_EQIP(シールド, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(シールド, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH
;---------------------------
; 装甲更新
;---------------------------
@EQUIP_UPDATE_3(SHIP_ID, COUNTRY_ID, SLOT_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM SLOT_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

#DIM EQUIP_LIST, ARMOR_TOTAL_COUNT, STATUS_LENGTH + 1

CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, 装甲)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, 装甲, SLOT_ID, SHIP_STATUS:SHIP_ARMOR_SIZE, SHIP_ID, 0)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, 装甲)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
TRYCCALLFORM GET_ARMOR_STATUS_{SELECTED}(STATUS)
	;TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
	SIF SHIP_STATUS:SHIP_ARMOR_SIZE != STATUS:SIZE
		GOTO INPUT_LOOP
	;TRYCALLFORM GET_ARMOR_DESCRIPTION_{SELECTED}
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):装甲:SLOT_ID = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_ARMOR(SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(装甲, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH
;---------------------------
; エンジン更新
;---------------------------
@EQUIP_UPDATE_4(SHIP_ID, COUNTRY_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

#DIM EQUIP_LIST, ENGIN_TOTAL_COUNT, STATUS_LENGTH + 1

CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, エンジン)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, エンジン, 0, SHIP_STATUS:SHIP_ENGIN_SIZE, SHIP_ID, 0)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, エンジン)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
TRYCCALLFORM GET_ENGIN_STATUS_{SELECTED}(STATUS)
	TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
	SIF SHIP_STATUS:SHIP_ENGIN_SIZE != STATUS:SIZE
		GOTO INPUT_LOOP
	;TRYCALLFORM GET_ENGIN_DESCRIPTION_{SELECTED}
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):エンジン:0 = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_ENGIN(SHIP_ID, COUNTRY_ID, SELECTED)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(エンジン, SHIP_ID, COUNTRY_ID, SELECTED, 0, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH
;---------------------------
; AI更新
;---------------------------
@EQUIP_UPDATE_5(SHIP_ID, COUNTRY_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

#DIM EQUIP_LIST, COMPUTER_TOTAL_COUNT, STATUS_LENGTH + 1

CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, AI)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, AI, 0, 0, SHIP_ID, 0)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, AI)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
;TRYCCALLFORM GET_COMPUTER_DESCRIPTION_{SELECTED}
TRYCCALLFORM GET_COMPUTER_STATUS_{SELECTED}(STATUS)
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):AI:0 = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_COMPUTER(SHIP_ID, COUNTRY_ID, SELECTED)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(AI, SHIP_ID, COUNTRY_ID, SELECTED, 0, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH
;---------------------------
; センサー更新
;---------------------------
@EQUIP_UPDATE_6(SHIP_ID, COUNTRY_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

#DIM EQUIP_LIST, SENSOR_TOTAL_COUNT, STATUS_LENGTH + 1

CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, センサー)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, センサー, 0, 0, SHIP_ID, 0)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, センサー)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
;TRYCCALLFORM GET_SENSOR_DESCRIPTION_{SELECTED}
TRYCCALLFORM GET_SENSOR_STATUS_{SELECTED}(STATUS)
	IF UPDATE_TEMPLATE
		PRINTFORML センサー:選択{SELECTED}
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):センサー:0 = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_SENSOR(SHIP_ID, COUNTRY_ID, SELECTED)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(センサー, SHIP_ID, COUNTRY_ID, SELECTED, 0, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH

;---------------------------
; オプション更新
;---------------------------
@EQUIP_UPDATE_7(SHIP_ID, COUNTRY_ID, SLOT_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM SLOT_ID
#DIM UPDATE_TEMPLATE
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH

#DIM EQUIP_LIST, OPTION_TOTAL_COUNT, STATUS_LENGTH + 1
DEBUGPRINTFORM {SLOT_ID}


CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, オプション)
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, オプション, SLOT_ID, 0, SHIP_ID, 0)
PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, オプション)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT
;TRYCCALLFORM GET_OPTION_DESCRIPTION_{SELECTED}
TRYCCALLFORM GET_OPTION_STATUS_{SELECTED}(STATUS)
	;積載量に変更を加えるタイプのオプションは積載中は変更できないようにする
	TRYCALLFORM GET_OPTION_TYPE_{SHIP_EQUIP:オプション:SLOT_ID:SHIP_ID}
	IF  RESULTS == "ADD_CONTAINER"
		CALL SUM_CARGO_SIZE(SHIP_ID)
		IF RESULT > 0
			PRINTFORMW 貨物の搭載中はコンテナ装備の変更は行えません
			GOTO INPUT_LOOP
		ENDIF
	ENDIF
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):オプション:SLOT_ID = SELECTED
		RETURN
	ENDIF
;	CALL CHECK_BUY
;	IF RESULT == 1
;		CALL CHANGE_OPTION(SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID)
;	ELSE
;		GOTO INPUT_LOOP
;	ENDIF
	CALL CHANGE_EQIP(オプション, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH

;---------------------------
; 射出対象更新
;---------------------------
@EQUIP_UPDATE_8(SHIP_ID, COUNTRY_ID, SLOT_ID, UPDATE_TEMPLATE = 0)
#DIM SHIP_ID
#DIM COUNTRY_ID
#DIM SLOT_ID
#DIM UPDATE_TEMPLATE
#DIM COUNTRY
#DIM ITER
#DIM SELECTED
#DIM STATUS, STATUS_LENGTH
#DIM SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM LAUNCHER_DATA, LAUNCHER_DATA_LENGTH
#DIM WEAPON_FILTER

#DIM EQUIP_LIST, PAYLOAD_TOTAL_COUNT, STATUS_LENGTH + 1

IF SHIP_CATEGORY:SHIP_ID == 調査船 || SHIP_CATEGORY:SHIP_ID == 輸送船 || SHIP_CATEGORY:SHIP_ID == 作業船
	PRINTW この艦種は射出対象を装備できません
	RETURN
ENDIF
CALL EQUIP_LIST_INIT(EQUIP_LIST)
CALL GET_EQUIP_LIST(EQUIP_LIST, 射出対象)

FOR COUNT, 0, PAYLOAD_TOTAL_COUNT
	EQUIP_LIST:COUNT:DAMAGE = EQUIP_LIST:COUNT:DAMAGE * MAX(1, EQUIP_LIST:COUNT:FIRE_RATE)
NEXT

TRYCALLFORM GET_LAUNCHER_DATA_{SHIP_EQUIP:主砲:SLOT_ID:SHIP_ID}(LAUNCHER_DATA)
;PRINTFORMW LAUNCHER_DATA:PAYLOAD_MAX_SIZEは{LAUNCHER_DATA:PAYLOAD_MAX_SIZE}です
TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(SHIP_STATUS)
$INPUT_LOOP
CALL EQUIP_LIST_DISPLAY(EQUIP_LIST, 射出対象, SLOT_ID, LAUNCHER_DATA:PAYLOAD_MAX_SIZE, SHIP_ID, WEAPON_FILTER)

PRINTBUTTON "[ソート]", 997
PRINTL
PRINTBUTTON "[フィルタ設定]", 998
PRINTL
PRINTBUTTON "[戻る]", 999
INPUT
SIF RESULT == 999
	RETURN
IF RESULT == 998
	CALL WEAPON_FILTER_CONFIG(WEAPON_FILTER)
	GOTO INPUT_LOOP		
ENDIF
IF RESULT == 997
	CALL EQUIP_LIST_SORT(EQUIP_LIST, 射出対象)
	GOTO INPUT_LOOP
ENDIF
SELECTED = RESULT

TRYCCALLFORM GET_PAYLOAD_STATUS_{SELECTED}(STATUS)
	SIF LAUNCHER_DATA:PAYLOAD_MAX_SIZE < STATUS:SIZE
		GOTO INPUT_LOOP
	IF UPDATE_TEMPLATE
		SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):射出対象:SLOT_ID = SELECTED
		RETURN
	ENDIF
	CALL CHANGE_EQIP(射出対象, SHIP_ID, COUNTRY_ID, SELECTED, SLOT_ID, 0)
	SIF RESULT == 0
		GOTO INPUT_LOOP
CATCH
	GOTO INPUT_LOOP
ENDCATCH

;---------------------------
; 購入確認
;---------------------------
@CHECK_BUY
DRAWLINE
$INPUT_LOOP
PRINTL 購入しますか？
PRINTBUTTON "[0] 購入", 0
PRINT  
PRINTBUTTON "[1] 戻る", 1
PRINTL
INPUT
IF RESULT == 0
	IF PRICE > MONEY
		SETCOLOR 0XFF0000
		PRINTW 資金不足で買えませんでした
		RESETCOLOR
		RETURN 0
	ENDIF
	RETURN 1
ELSEIF RESULT == 1
	RETURN 0
ELSE
	CLEARLINE 3
	GOTO INPUT_LOOP
ENDIF

;---------------------------
; テンプレートで購入確認
;---------------------------
@EQUIP_UPDATE_BY_TEMPLATE(SHIP_ID, OWNER)
#DIM SHIP_ID
#DIM OWNER
#DIM DYNAMIC _EQUIP_TYPE
#DIM DYNAMIC _SLOT_ID
#DIM DYNAMIC _EQUIP_ID
#DIM DYNAMIC _SHIP_STATUS, SHIP_STATUS_LENGTH
#DIM DYNAMIC _MAX_SLOT

TRYCALLFORM GET_SHIP_STATUS_{SHIP_MODEL:SHIP_ID}(_SHIP_STATUS)

$INPUT_LOOP
PRINTFORML 現在のテンプレート

FOR _EQUIP_TYPE, 0, EQUIP_TYPE_LENGTH
	SELECTCASE _EQUIP_TYPE
		CASE 主砲
			_MAX_SLOT = _SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
		CASE 副砲
			_MAX_SLOT = _SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
		CASE シールド
			_MAX_SLOT = _SHIP_STATUS:SHIP_SIELD_SLOT
		CASE 装甲
			_MAX_SLOT = _SHIP_STATUS:SHIP_ARMOR_SLOT
		CASE オプション
			_MAX_SLOT = _SHIP_STATUS:SHIP_OPTION_SLOT
		CASEELSE
			_MAX_SLOT = 0
	ENDSELECT
	IF _MAX_SLOT
		FOR _SLOT_ID, 0, _MAX_SLOT
			IF !SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID
				SELECTCASE _EQUIP_TYPE
					CASE 主砲
						IF SHIP_CATEGORY:SHIP_ID == 空母
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 101
						ELSE
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 1
						ENDIF
					CASE 副砲
						SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 1
					CASE シールド
						IF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, コルベット, 調査船, 輸送船, 作業船)
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 1
						ELSEIF SHIP_CATEGORY:SHIP_ID == フリゲート || SHIP_CATEGORY:SHIP_ID == 駆逐艦
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 2
						ELSEIF SHIP_CATEGORY:SHIP_ID == 巡洋艦
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 3
						ELSEIF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, 戦艦, 空母)
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 4
						ENDIF
					CASE 装甲
						IF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, コルベット, 調査船, 輸送船, 作業船)
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 1
						ELSEIF SHIP_CATEGORY:SHIP_ID == フリゲート || SHIP_CATEGORY:SHIP_ID == 駆逐艦
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 2
						ELSEIF SHIP_CATEGORY:SHIP_ID == 巡洋艦
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 3
						ELSEIF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, 戦艦, 空母)
							SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 4
						ENDIF
				ENDSELECT
			ENDIF
			RESULTS = 
			TRYCALLFORM GET_%EQUIP_CATEGORY_NAME_EN:_EQUIP_TYPE%_NAME_{SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID}
			PRINTBUTTON @"%EQUIP_CATEGORY_NAME:_EQUIP_TYPE%{_SLOT_ID}: %RESULTS%", _EQUIP_TYPE * 100 + _SLOT_ID
			PRINTL
		NEXT
	ELSE
		IF !SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0
			SELECTCASE _EQUIP_TYPE
				CASE エンジン
					IF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, コルベット, 調査船, 輸送船, 作業船)
						SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 1
					ELSEIF SHIP_CATEGORY:SHIP_ID == フリゲート || SHIP_CATEGORY:SHIP_ID == 駆逐艦
						SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 2
					ELSEIF SHIP_CATEGORY:SHIP_ID == 巡洋艦
						SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 3
					ELSEIF GROUPMATCH(SHIP_CATEGORY:SHIP_ID, 戦艦, 空母)
						SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 4
					ENDIF
				CASE AI
					SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 1
				CASE センサー
					SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 1
			ENDSELECT
		ENDIF
		RESULTS = 
		TRYCALLFORM GET_%EQUIP_CATEGORY_NAME_EN:_EQUIP_TYPE%_NAME_{SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0}
		PRINTBUTTON @"%EQUIP_CATEGORY_NAME:_EQUIP_TYPE%: %RESULTS%", _EQUIP_TYPE * 100 + 0
		PRINTL
	ENDIF
NEXT

DRAWLINE
PRINTBUTTON "[これで購入]", -1
PRINTL
PRINTBUTTON "[キャンセル]", -2
INPUT
IF RESULT == -1
	FOR _EQUIP_TYPE, 0, EQUIP_TYPE_LENGTH
		SELECTCASE _EQUIP_TYPE
			CASE 主砲
				_MAX_SLOT = _SHIP_STATUS:SHIP_MAIN_WEAPON_SLOT
			CASE 副砲
				_MAX_SLOT = _SHIP_STATUS:SHIP_SUB_WEAPON_SLOT
			CASE シールド
				_MAX_SLOT = _SHIP_STATUS:SHIP_SIELD_SLOT
			CASE 装甲
				_MAX_SLOT = _SHIP_STATUS:SHIP_ARMOR_SLOT
			CASE オプション
				_MAX_SLOT = _SHIP_STATUS:SHIP_OPTION_SLOT
			CASEELSE
				_MAX_SLOT = 0
		ENDSELECT
		IF _MAX_SLOT
			FOR _SLOT_ID, 0, _MAX_SLOT
				IF SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID
					SIF SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID != SHIP_EQUIP:_EQUIP_TYPE:_SLOT_ID:SHIP_ID
						CALL CHANGE_EQIP(_EQUIP_TYPE, SHIP_ID, OWNER, SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID, _SLOT_ID, 1)
						;TRYCALLFORM CHANGE_%EQUIP_CATEGORY_NAME_EN:_EQUIP_TYPE%(SHIP_ID, OWNER, SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID, _SLOT_ID)
				ELSE
					SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID = 0
					SHIP_EQUIP:_EQUIP_TYPE:_SLOT_ID:SHIP_ID = SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:_SLOT_ID
				ENDIF
			NEXT
		ELSE
			IF SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0
				SIF SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 != SHIP_EQUIP:_EQUIP_TYPE:0:SHIP_ID
					CALL CHANGE_EQIP(_EQUIP_TYPE, SHIP_ID, OWNER, SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0, 0, 1)
					;TRYCALLFORM CHANGE_%EQUIP_CATEGORY_NAME_EN:_EQUIP_TYPE%(SHIP_ID, OWNER, SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0)
			ELSE
				SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0 = 0
				SHIP_EQUIP:_EQUIP_TYPE:0:SHIP_ID = SHIP_EQUIP_TEMPLATE:(SHIP_MODEL:SHIP_ID):_EQUIP_TYPE:0
			ENDIF
		ENDIF
	NEXT
ELSEIF RESULT == -2
	RETURN
ELSE
	_EQUIP_TYPE = RESULT / 100
	_SLOT_ID = RESULT % 100
	IF GROUPMATCH(_EQUIP_TYPE, 主砲, 副砲, シールド, 装甲, オプション)
		TRYCALLFORM EQUIP_UPDATE_{_EQUIP_TYPE}(SHIP_ID, OWNER, _SLOT_ID, 1)
	ELSE
		TRYCALLFORM EQUIP_UPDATE_{_EQUIP_TYPE}(SHIP_ID, OWNER, 1)
	ENDIF
	GOTO INPUT_LOOP
ENDIF

;-------------------------------------------------
; 武器用フィルタ設定
;-------------------------------------------------
@WEAPON_FILTER_CONFIG(WEAPON_FILTER)
#DIM REF WEAPON_FILTER
#DIM ITER

$CONFIG_LOOP
DRAWLINE
PRINTL 設定すると装備できるものの中から条件を満たした装備だけを表示する様に。
PRINTL 未設定時には装備可能な全装備を表示する。
PRINTL 
PRINTL 攻撃属性
FOR ITER, 0, 攻撃属性
	GETBIT WEAPON_FILTER, ITER
	SELECTCASE RESULT
		CASE 0
			SETCOLOR カラー_選択不可
		CASE 1
			RESETCOLOR
	ENDSELECT
	PRINTBUTTON @"%WEAPON_TYPE_NAME:ITER%　", ITER
NEXT
RESETCOLOR
PRINTL
PRINTL 有効距離
FOR ITER, 0, 範囲_有効距離
	GETBIT  WEAPON_FILTER, ITER + 攻撃属性
	SELECTCASE RESULT
		CASE 0
			SETCOLOR カラー_選択不可
		CASE 1
			RESETCOLOR
	ENDSELECT
	PRINTBUTTON @"{ITER + 1}　", ITER + 攻撃属性
NEXT
RESETCOLOR
PRINTL
PRINTL サイズ
FOR ITER, 0, 範囲_サイズ
	GETBIT  WEAPON_FILTER, ITER + 攻撃属性 + 範囲_有効距離
	SELECTCASE RESULT
		CASE 0
			SETCOLOR カラー_選択不可
		CASE 1
			RESETCOLOR
	ENDSELECT
	PRINTBUTTON @"{ITER + 1}　", ITER + 攻撃属性 + 範囲_有効距離
NEXT
RESETCOLOR
PRINTL
PRINTL
PRINTBUTTON "[フィルターのリセット]", 998
PRINTL
PRINTBUTTON "[戻る]", 999

$INPUT_LOOP
INPUT

SELECTCASE RESULT
	CASE 998
		WEAPON_FILTER = 0
	CASE 999
		RETURN

	; 属性
	CASE IS < 攻撃属性
		INVERTBIT WEAPON_FILTER, RESULT

	; 有効距離
	CASE IS < 攻撃属性 + 範囲_有効距離
		INVERTBIT WEAPON_FILTER, RESULT
	; - 攻撃属性

	; サイズ
	CASE IS < 攻撃属性 + 範囲_有効距離 + 範囲_サイズ
		INVERTBIT WEAPON_FILTER, RESULT

	; - 攻撃属性 - 範囲_有効距離
	CASEELSE
		GOTO INPUT_LOOP
ENDSELECT

GOTO CONFIG_LOOP


;-------------------------------------------------
; 武器用フィルタ確認
; 抽出外で0・抽出対象で1
;-------------------------------------------------
@WEAPON_FILTER_CHECK(STATUS, WEAPON_FILTER)
#DIM REF WEAPON_FILTER
#DIM REF STATUS
#DIM ITER
#DIM NO_FILTER

NO_FILTER = 1
FOR ITER, 0, 攻撃属性
	GETBIT  WEAPON_FILTER, ITER
	SELECTCASE RESULT
		CASE 1
			NO_FILTER = 0
			BREAK
	ENDSELECT
NEXT
GETBIT  WEAPON_FILTER, STATUS:WEAPON_TYPE
SIF RESULT == 0 && NO_FILTER == 0
	RETURN 0

NO_FILTER = 1
FOR ITER, 0, 範囲_有効距離
	GETBIT  WEAPON_FILTER, ITER + 攻撃属性
	SELECTCASE RESULT
		CASE 1
			NO_FILTER = 0
			BREAK
	ENDSELECT
NEXT
GETBIT  WEAPON_FILTER, STATUS:FIRE_RANGE + 攻撃属性 - 1
SIF RESULT == 0 && NO_FILTER == 0
	RETURN 0

NO_FILTER = 1
FOR ITER, 0, 範囲_サイズ
	GETBIT  WEAPON_FILTER, ITER + 攻撃属性 + 範囲_有効距離
	SELECTCASE RESULT
		CASE 1
			NO_FILTER = 0
			BREAK
	ENDSELECT
NEXT
GETBIT  WEAPON_FILTER, STATUS:SIZE + 攻撃属性 + 範囲_有効距離 - 1
SIF RESULT == 0 && NO_FILTER == 0
	RETURN 0
RETURN 1

;-------------------------------------------------
; 装備のデータをリストから表示する
; 艦載機回りを主砲から分離できたら艦載機関係の特殊処理とSHIP_IDとSPACECRAFT_CARRIERを消せるはず
; リストは-1で初期化してから作ってあるものを用いる事を想定(存在しない装備のIDを-1にする為)
; SHIP_STATUSの形式とは別の形式のデータからSLOT_SIZEを入れる為にSHIP_STATUSからSLOT_SIZEへ置き換え
;-------------------------------------------------
@EQUIP_LIST_DISPLAY(EQUIP_LIST, CATEGORY_NUM, SLOT_ID, SLOT_SIZE, SHIP_ID, FILTER_DATA = 0)
#DIM REF EQUIP_LIST, 0, 0
#DIM PRINT_COUNT
#DIM CATEGORY_NUM
#DIM EQUIP_TOTAL_COUNT

#DIM SLOT_ID
#DIM SLOT_SIZE

#DIM FILTER_DATA
#DIM FILTER_COUNT
#DIM EQUIP_STATUS, STATUS_LENGTH

#DIM CONST EQUIP_ID = STATUS_LENGTH

#DIM SHIP_ID
#DIM SPACECRAFT_CARRIER

;PRINTFORML 装備カテゴリ番号は{CATEGORY_NUM}です
;PRINTFORML スロットサイズは{SLOT_SIZE}です

; 艦載機関係の特殊処理
TRYCCALLFORM CAN_SPACECRAFT_CARRYING_{SHIP_MODEL:SHIP_ID}
	RESULT &= 1 << SLOT_ID
CATCH
	RESULT = 0
ENDCATCH

IF SHIP_CATEGORY:SHIP_ID == 空母 || RESULT != 0
	SPACECRAFT_CARRIER = 1
ELSE
	SPACECRAFT_CARRIER = 0
ENDIF
; 艦載機関係の特殊処理ここまで

VARSIZE EQUIP_LIST
EQUIP_TOTAL_COUNT = RESULT:0

; 装備種毎のヘッダー
SELECTCASE CATEGORY_NUM
	CASE 主砲
		IF SPACECRAFT_CARRIER == 0
			;通常主砲
			PRINTFORML      装備名                               ダメージ  射撃レート 命中率  有効距離  サイズ  費用
		ELSE
			;空母等主砲
			PRINTFORML      装備名                      対艦攻撃力 空対空攻撃力  射撃レート  命中率  有効距離  耐久  サイズ  費用
		ENDIF
	CASE 副砲
		PRINTFORML      装備名                          ダメージ  射撃レート 命中率 対空 有効距離  サイズ  費用

	CASE シールド
		PRINTFORML      装備名                               シールド値  シールド自動回復値  サイズ  費用

	CASE 装甲
		PRINTFORML      装備名                                  装甲  サイズ  費用

	CASE エンジン
		PRINTFORML      装備名                               スピード  回避  サイズ  費用

	CASE AI
		PRINTFORML      %"装備名", 40, LEFT%費用

	CASE センサー
		PRINTFORML      装備名                               センサー範囲  費用

	CASE オプション
		PRINTFORML      %"装備名", 40, LEFT%費用
	CASE 射出対象
			PRINTFORML %"     装備名", 31, LEFT%%"DPS/機", 3, RIGHT%\t%"対空", 6, RIGHT%\t%"命中率", 10, RIGHT%%"有効距離", 10, RIGHT%%"耐久", 8, RIGHT%\t%"容積 サイズ"%\t%"費用"%

ENDSELECT
DRAWLINE

; 各装備の表示処理
FOR PRINT_COUNT, 0, EQUIP_TOTAL_COUNT

	; 表示対象外の装備の時は次周へ
	IF  EQUIP_LIST:PRINT_COUNT:EQUIP_ID == -1
		; 初期化されたデータの入っている項目は対象外
		;PRINTFORML ID:{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}は初期化されたデータが入っています
		CONTINUE
	ELSEIF CAN_EQUIPPED_SIZE(CATEGORY_NUM, EQUIP_LIST:PRINT_COUNT:SIZE, SLOT_SIZE) == 0
		; サイズ的に不適合なら対象外
		;PRINTFORML ID:{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}はサイズ的に不適合です(装備サイズ{EQUIP_LIST:PRINT_COUNT:SIZE}・%EQUIP_CATEGORY_NAME:CATEGORY_NUM%スロットサイズ{SLOT_SIZE})
		CONTINUE
	ELSEIF FILTER_DATA != 0
		; フィルタがあるなら装備のステータスをチェック用配列に入れて装備種毎のフィルタ確認関数で確認する
		VARSET EQUIP_STATUS
		FOR FILTER_COUNT, 0, STATUS_LENGTH
			EQUIP_STATUS:FILTER_COUNT = EQUIP_LIST:PRINT_COUNT:FILTER_COUNT
		NEXT

		SELECTCASE CATEGORY_NUM
			CASE 主砲, 副砲, 射出対象
				CALL WEAPON_FILTER_CHECK(EQUIP_STATUS, FILTER_DATA)

			; 主砲・副砲以外のフィルタも用意されたらここにCASEを追加してそれぞれのフィルタ確認関数を呼ぶ

			CASEELSE
				;その種類の装備にフィルタ処理が無いなら常に表示対象にする
				RESULT = 1
		ENDSELECT
		IF RESULT == 0
			;PRINTFORML ID:{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}はフィルタで除外されました
			CONTINUE
		ENDIF
	ENDIF
	; 現状において購入不能な装備なら対象外
	TRYCCALLFORM IS_SALE_%EQUIP_CATEGORY_NAME_EN:CATEGORY_NUM%_{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}
		IF RESULT == 0
			;PRINTFORML ID:{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}は購入不能です
			CONTINUE
		ENDIF
	CATCH
		; 条件判定関数が無い場合には常に購入可能
	ENDCATCH

	; 主砲の場合は艦載機かどうかで追加で非表示処理
	IF CATEGORY_NUM == 主砲
		IF SPACECRAFT_CARRIER == 1
			; 空母等の主砲には艦載機以外を表示しない
			IF EQUIP_LIST:PRINT_COUNT:WEAPON_TYPE != 艦載機
				CONTINUE
			ENDIF
		ELSE
			; 通常艦艇の主砲には艦載機を表示しない
			IF EQUIP_LIST:PRINT_COUNT:WEAPON_TYPE == 艦載機
				CONTINUE
			ENDIF
		ENDIF
	ENDIF
	; 対象外の装備をはじく処理ここまで

	; 値段にカンマを入れるのと装備名取得は共通処理
	LOCALS = %TOSTR(EQUIP_LIST:PRINT_COUNT:PRICE, "$####,###")%
	TRYCALLFORM GET_%EQUIP_CATEGORY_NAME_EN:CATEGORY_NUM%_NAME_{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}

	; 装備種毎の様式で表示
	SELECTCASE CATEGORY_NUM
		CASE 主砲
			IF SPACECRAFT_CARRIER == 0
				;通常主砲
				PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT% {EQUIP_LIST:PRINT_COUNT:DAMAGE, 4, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RATE, 2, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:HIT_RATE, 3, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RANGE}\t{EQUIP_LIST:PRINT_COUNT:SIZE}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID
			ELSE
				;空母等主砲
				PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 26, LEFT% {EQUIP_LIST:PRINT_COUNT:DAMAGE, 3, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:ANTI_AIR, 6, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RATE, 12, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:HIT_RATE, 8, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RANGE, 0, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:AIR_SHIP_HP, 4, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:SIZE}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID
			ENDIF
		CASE 副砲
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 30, LEFT% {EQUIP_LIST:PRINT_COUNT:DAMAGE, 4, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RATE, 2, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:HIT_RATE, 3, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:ANTI_AIR, 3, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RANGE}\t{EQUIP_LIST:PRINT_COUNT:SIZE}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

		CASE シールド
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT% {EQUIP_LIST:PRINT_COUNT:SIELD, 4, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:SIELD_RECOVER, 8, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:SIZE, 6, RIGHT}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

		CASE 装甲
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT% {EQUIP_LIST:PRINT_COUNT:ARMOR, 4, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:SIZE}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

		CASE エンジン
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT% {EQUIP_LIST:PRINT_COUNT:SPEED}\t{EQUIP_LIST:PRINT_COUNT:AVOID, 3, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:SIZE}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

		CASE AI
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT%%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

		CASE センサー
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT% {EQUIP_LIST:PRINT_COUNT:SENSOR}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

		CASE オプション
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 40, LEFT%%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID
		CASE 射出対象
			TRYCCALLFORM GET_PAYLOAD_VOLUME_{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}
			CATCH
				;必要なデータが無いので表示対象にしない
				;PRINTFORMW GET_PAYLOAD_VOLUME_{EQUIP_LIST:PRINT_COUNT:EQUIP_ID}が存在しないので非表示にします
				CONTINUE
			ENDCATCH
			PRINTBUTTON @"[{EQUIP_LIST:PRINT_COUNT:EQUIP_ID, 3, RIGHT}] %RESULTS, 26, LEFT% {EQUIP_LIST:PRINT_COUNT:DAMAGE, 3, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:ANTI_AIR, 6, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:HIT_RATE, 8, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:FIRE_RANGE, 0, RIGHT}\t{EQUIP_LIST:PRINT_COUNT:AIR_SHIP_HP, 4, RIGHT}\t{RESULT}\t{EQUIP_LIST:PRINT_COUNT:SIZE}\t%LOCALS%", EQUIP_LIST:PRINT_COUNT:EQUIP_ID

	ENDSELECT
	PRINTL
NEXT

;-------------------------------------------------
; サイズ的に装備可能かを返す式中関数
;-------------------------------------------------
@CAN_EQUIPPED_SIZE(EQUIP_CATEGORY, EQUIP_SIZE, SLOT_SIZE)
#FUNCTION
#DIM DYNAMIC EQUIP_CATEGORY
#DIM DYNAMIC EQUIP_SIZE
#DIM DYNAMIC SLOT_SIZE

SELECTCASE EQUIP_CATEGORY
	CASE 主砲, 副砲, 射出対象
		IF SLOT_SIZE >= EQUIP_SIZE
			RETURNF 1
		ENDIF
	CASE 装甲, エンジン, シールド
		IF SLOT_SIZE == EQUIP_SIZE
			RETURNF 1
		ENDIF
	CASE AI, オプション, センサー
		; サイズの概念無し
		RETURNF 1
	CASEELSE
		THROW 装備の種類({EQUIP_CATEGORY})が不正な値です。
ENDSELECT
RETURNF 0

;-------------------------------------------------
; 装備のリストを返す
;-------------------------------------------------
; EQUIP_LISTには「(装備種毎の検索範囲の定数), STATUS_LENGTH + 1」(通常の装備ステータスの他に装備のIDを入れる必要があるので+1)の要素数を持つ2次元配列を
; CATEGORY_NUMには装備の種類相当の定数を渡してください
; 参照型配列にEQUIP_LIST:(存在装備番号) 毎に指定した装備のステータス(0～STATUS_LENGTH - 1番まで)および装備ID(元々のID・抜けが存在しうる値)を(STATUS_LENGTH)番に入れて返し
; RESULT:0としてリストに入っているデータの数を返します
@GET_EQUIP_LIST(EQUIP_LIST, CATEGORY_NUM)

#DIM REF EQUIP_LIST,0,0
#DIM EQUIP_TOTAL_COUNT

#DIM EQUIP_DATA, STATUS_LENGTH
#DIM CONST EQUIP_ID = STATUS_LENGTH

#DIM EQUIP_NUM
#DIM LIST_COUNT
#DIM DATA_COUNT
#DIM CATEGORY_NUM

VARSIZE EQUIP_LIST
EQUIP_TOTAL_COUNT = RESULT:0

;PRINTFORML EQUIP_TOTAL_COUNTは{EQUIP_TOTAL_COUNT}です

LIST_COUNT = 0

; (リストの長さ - 1)番までのIDを持つ装備を確認する(0番も確認するので全てのIDの装備があるならリストは全て埋まる)
FOR EQUIP_NUM, 0, EQUIP_TOTAL_COUNT
	VARSET EQUIP_DATA
	; 装備の関数が存在した時だけリストにデータを追加する
	TRYCCALLFORM GET_%EQUIP_CATEGORY_NAME_EN:CATEGORY_NUM%_STATUS_{EQUIP_NUM}(EQUIP_DATA)
		; 実際にステータスとIDを入れる
		FOR DATA_COUNT, 0, STATUS_LENGTH + 1
			IF DATA_COUNT == EQUIP_ID
				EQUIP_LIST:LIST_COUNT:DATA_COUNT = EQUIP_NUM
			ELSE
				EQUIP_LIST:LIST_COUNT:DATA_COUNT = EQUIP_DATA:DATA_COUNT
			ENDIF
		NEXT
		LIST_COUNT++
	CATCH
		;PRINTFORML ID{EQUIP_NUM}の装備は存在しません
		; この番号のIDを持つ装備はないので処理不要
	ENDCATCH
NEXT

RETURN LIST_COUNT

;-------------------------------------------------
; 装備リストの初期化関数
; 全てに0を入れてから(STATUS_LENGTH)番にだけ-1を入れる(ステータスの基本値は0にしたいけど・装備のIDは0番から始まるから「初期化されたままの空データ」のIDを0にする訳にはいかない)
;-------------------------------------------------
@EQUIP_LIST_INIT(EQUIP_LIST)
#DIM REF EQUIP_LIST,0,0

VARSET EQUIP_LIST, 0
VARSIZE EQUIP_LIST
FOR COUNT, 0, RESULT
	EQUIP_LIST:COUNT:STATUS_LENGTH = -1
NEXT


;-------------------------------------------------
; 装備リストのソートUI
;-------------------------------------------------
@EQUIP_LIST_SORT(EQUIP_LIST, CATEGORY_NUM)
#DIM REF EQUIP_LIST,0,0
#DIM CATEGORY_NUM

#DIM SORT_CANDIDATE

#DIM STATUS_COUNT
#DIM BUTTON_COUNT

#DIM SORT_RESULT

SORT_CANDIDATE = 0

; ソート対象のステータスをビットに入れる(STATUS_LENGTHが62以上になると大改修が必要？)
SETBIT SORT_CANDIDATE, PRICE
SETBIT SORT_CANDIDATE, CRITICAL_RISK
SETBIT SORT_CANDIDATE, STATUS_LENGTH

SELECTCASE CATEGORY_NUM

	CASE 主砲
		SETBIT SORT_CANDIDATE, DAMAGE
		SETBIT SORT_CANDIDATE, FIRE_RATE
		SETBIT SORT_CANDIDATE, HIT_RATE
		SETBIT SORT_CANDIDATE, FIRE_RANGE
		SETBIT SORT_CANDIDATE, SIZE
		SETBIT SORT_CANDIDATE, WEAPON_TYPE

	;(主砲扱いの艦載機が存在するのでこれも必要)
		SETBIT SORT_CANDIDATE, ANTI_AIR
		SETBIT SORT_CANDIDATE, AIR_SHIP_HP
		SETBIT SORT_CANDIDATE, AIR_SHIP_COUNT

	CASE 副砲
		SETBIT SORT_CANDIDATE, DAMAGE
		SETBIT SORT_CANDIDATE, FIRE_RATE
		SETBIT SORT_CANDIDATE, HIT_RATE
		SETBIT SORT_CANDIDATE, FIRE_RANGE
		SETBIT SORT_CANDIDATE, SIZE
		SETBIT SORT_CANDIDATE, WEAPON_TYPE
		SETBIT SORT_CANDIDATE, ANTI_AIR

	;(副砲扱いの艦載機が存在するのでこれも必要)
		SETBIT SORT_CANDIDATE, AIR_SHIP_HP
		SETBIT SORT_CANDIDATE, AIR_SHIP_COUNT

	CASE シールド
		SETBIT SORT_CANDIDATE, SIELD
		SETBIT SORT_CANDIDATE, SIELD_RECOVER

	CASE 装甲
		SETBIT SORT_CANDIDATE, ARMOR
		SETBIT SORT_CANDIDATE, AVOID

	CASE エンジン
		SETBIT SORT_CANDIDATE, SPEED
		SETBIT SORT_CANDIDATE, AVOID
	CASE AI
		SETBIT SORT_CANDIDATE, AVOID
		SETBIT SORT_CANDIDATE, HIT_RATE
		SETBIT SORT_CANDIDATE, FIRE_RATE

	CASE センサー
		SETBIT SORT_CANDIDATE, SENSOR
	CASE 射出対象
		SETBIT SORT_CANDIDATE, DAMAGE
		SETBIT SORT_CANDIDATE, HIT_RATE
		SETBIT SORT_CANDIDATE, FIRE_RANGE
		SETBIT SORT_CANDIDATE, SIZE
		SETBIT SORT_CANDIDATE, WEAPON_TYPE
		SETBIT SORT_CANDIDATE, ANTI_AIR
		SETBIT SORT_CANDIDATE, AIR_SHIP_HP


ENDSELECT

$BUTTON_DISPLAY
; ボタン表示処理
BUTTON_COUNT = 0

FOR STATUS_COUNT, 0, STATUS_LENGTH + 1
	;ソート対象のステータスではないのなら
	IF GETBIT(SORT_CANDIDATE, STATUS_COUNT) == 0
		CONTINUE
	ENDIF
	; ボタン表示
	IF STATUS_COUNT == STATUS_LENGTH
		PRINTBUTTON "装備ID", STATUS_COUNT
	ELSE
		PRINTBUTTON WEAPON_STATUS_NAME:STATUS_COUNT, STATUS_COUNT
	ENDIF
	PRINT 　
	; ボタンの改行処理
	BUTTON_COUNT++
	IF BUTTON_COUNT == 2
		PRINTL
		BUTTON_COUNT = 0
	ENDIF
NEXT

PRINTBUTTON "戻る", 999


; ボタン表示処理ここまで

WHILE 1
	INPUT

	SORT_RESULT = RESULT

	IF SORT_RESULT == 999
		RETURN
	ELSEIF SORT_RESULT > STATUS_LENGTH || SORT_RESULT < 0
		; 範囲外なら入力し直し
		CLEARLINE 1
		CONTINUE
	ELSEIF GETBIT(SORT_CANDIDATE, SORT_RESULT) == 0
		; 対象外なら入力し直し
		CLEARLINE 1
		CONTINUE
	ENDIF

	IF SORT_RESULT == STATUS_LENGTH
		PRINTL 装備ID
	ELSE
		PRINTSL WEAPON_STATUS_NAME:SORT_RESULT
	ENDIF

	PRINTBUTTON "[昇順]",0
	PRINTL
	PRINTBUTTON "[降順]",1
	PRINTL
	PRINTBUTTON "[戻る]",999

	WHILE 1
		INPUT

		SELECTCASE RESULT
			CASE 0, 1
				CALL TWO_DIM_ARRAY_SORT(EQUIP_LIST, SORT_RESULT, RESULT)
				RETURN
			CASE 999
				GOTO BUTTON_DISPLAY
		ENDSELECT
		CLEARLINE 1
	WEND
WEND
